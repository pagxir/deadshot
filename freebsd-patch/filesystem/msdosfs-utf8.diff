From b188a8a38ceb033d6c419c01f879dc4b36082572 Mon Sep 17 00:00:00 2001
From: pagxir <pagxir@gmail.com>
Date: Sat, 10 Mar 2012 15:13:17 +0000
Subject: [PATCH 1/2] add utf-8 supported

---
 msdosfs_conv.c   |  132 +++++++++++++++++++++++++++++++++++++++++++++++++++---
 msdosfs_vfsops.c |   12 ++++-
 2 files changed, 136 insertions(+), 8 deletions(-)

diff --git a/msdosfs_conv.c b/msdosfs_conv.c
index 0c801bf..ce36b82 100644
--- a/msdosfs_conv.c
+++ b/msdosfs_conv.c
@@ -221,6 +221,111 @@ l2u[256] = {
 	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, /* f8-ff */
 };
 
+static int
+iconv_u2w(const char **inbuf, size_t *inbytes,
+		char **outbuf, size_t *outbytes)
+{   
+	u_int8_t mark;
+	u_int16_t uc = 0;
+	char * obuf  = NULL;
+	const char *ibuf, *ibuf_end, *obuf_end;
+	if ((inbuf && inbytes && outbuf && outbytes) && 
+			(*inbuf && *inbytes && *outbuf && *outbytes)) {
+		ibuf = *inbuf;
+		ibuf_end = *inbuf + *inbytes;
+		obuf = *outbuf;
+		obuf_end = *outbuf + *outbytes;
+		int follow = 0;
+		while (ibuf < ibuf_end && &obuf[1] < obuf_end) {
+			mark = (u_int8_t) *ibuf++;
+			if (mark < 0xF0 && mark > 0xE0) {
+				/* 1110XXXX */
+				uc = (mark & 0x0F);
+				follow = 2;
+			} else if (mark < 0xE0 && mark > 0xC0) {
+				/* 110XXXXX */
+				uc = (mark & 0x1F);
+				follow = 1;
+			} else if (mark < 0x80) {
+				/* 0XXXXXXX */
+				uc = mark;
+				follow = 0;
+			} else {
+				/* convert fail: 0xF0 0xE0 should NOT in UTF-8 seq */
+				break;
+			}
+
+			if (&ibuf[follow] > ibuf_end) {
+				/* unexpect input end */
+				break;
+			}
+			for (; follow > 0; follow--) {
+				/* 10XX.XXXX 0x80-0xBF */
+				if ((*ibuf & 0xC0) != 0x80) {
+					*outbytes = obuf_end - *outbuf;
+					*inbytes = ibuf_end - *inbuf;
+					return 0;
+				}
+				uc = (uc << 6) | (*ibuf++ & 0x3F);
+			}
+			*obuf++ = (uc >> 8);
+			*obuf++ = uc;
+			*outbuf = obuf;
+			*inbuf = ibuf;
+		}
+		*outbytes = obuf_end - *outbuf;
+		*inbytes = ibuf_end - *inbuf;
+	}
+
+	return 0;
+}
+
+static int
+iconv_w2u(const char **inbuf, size_t *inbytes,
+		char **outbuf, size_t *outbytes)
+{
+	u_int16_t uc = 0;
+	char *obuf  = NULL;
+	const char *ibuf, *ibuf_end, *obuf_end;
+	if ((inbuf && inbytes && outbuf && outbytes) &&
+			(*inbuf && *inbytes && *outbuf && *outbytes)) {
+		ibuf = *inbuf;
+		ibuf_end = *inbuf + *inbytes;
+		obuf = *outbuf;
+		obuf_end = *outbuf + *outbytes;
+		int follow = 0;
+		while (&ibuf[1] < ibuf_end && obuf < obuf_end) {
+			uc = (0xFF & *ibuf++);
+			uc = (0xFF & *ibuf++) | (uc << 8);
+			if (uc < 0x80) {
+				*obuf++ = (uc);
+				follow = 0;
+			} else if (uc < 0x800) {
+				*obuf++ = (uc >> 6) | 0xC0;
+				follow = 1;
+			} else {
+				/* assert(uc <= 0xFFFF); */
+				*obuf++ = (uc >> 12) | 0xE0;
+				follow = 2;
+			}
+			if (&obuf[follow] > obuf_end) {
+				/*no output buffer */
+				break;
+			}
+			for (follow--; follow >= 0; follow--) {
+				int shift = follow * 6;
+				u_int8_t ch = uc >> shift;
+				*obuf++ = (ch & 0x3F) | 0x80;
+			}
+			*outbuf = obuf;
+			*inbuf = ibuf;
+		}
+		*outbytes = obuf_end - *outbuf;
+		*inbytes = ibuf_end - *inbuf;
+	}
+	return 0;
+}
+
 /*
  * DOS filenames are made of 2 parts, the name part and the extension part.
  * The name part is 8 characters long and the extension part is 3
@@ -762,7 +867,10 @@ winSlotCnt(un, unlen, pmp)
 	if (pmp->pm_flags & MSDOSFSMNT_KICONV && msdosfs_iconv) {
 		wlen = WIN_MAXLEN * 2;
 		wnp = wn;
-		msdosfs_iconv->conv(pmp->pm_u2w, (const char **)&un, &unlen, &wnp, &wlen);
+		if (pmp->pm_u2w != NULL)
+			msdosfs_iconv->conv(pmp->pm_u2w, (const char **)&un, &unlen, &wnp, &wlen);
+		else
+			iconv_u2w((const char**)&un, &unlen, &wnp, &wlen);
 		if (unlen > 0)
 			return 0;
 		return howmany(WIN_MAXLEN - wlen/2, WIN_CHARS);
@@ -800,7 +908,10 @@ mbsadjpos(const char **instr, size_t inlen, size_t outlen, int weight, int flag,
 	if (flag & MSDOSFSMNT_KICONV && msdosfs_iconv) {
 		outp = outstr;
 		outlen *= weight;
-		msdosfs_iconv->conv(handle, instr, &inlen, &outp, &outlen);
+		if (handle != NULL)
+			msdosfs_iconv->conv(handle, instr, &inlen, &outp, &outlen);
+		else
+			iconv_u2w(instr, &inlen, &outp, &outlen);
 		return (inlen);
 	}
 
@@ -870,8 +981,11 @@ unix2doschr(const u_char **instr, size_t *ilen, struct msdosfsmount *pmp)
 		ucslen = 2;
 		len = *ilen;
 		up = unicode;
-		msdosfs_iconv->convchr(pmp->pm_u2w, (const char **)instr,
-				     ilen, &up, &ucslen);
+		if (pmp->pm_u2w != NULL)
+			msdosfs_iconv->convchr(pmp->pm_u2w, (const char **)instr,
+					ilen, &up, &ucslen);
+		else
+			iconv_u2w((const char**)instr, ilen, &up, &ucslen);
 		unixlen = len - *ilen;
 
 		/*
@@ -947,8 +1061,12 @@ win2unixchr(u_char *outbuf, u_int16_t wc, struct msdosfsmount *pmp)
 		ilen = 2;
 		olen = len = 4;
 		inp = inbuf;
-		msdosfs_iconv->convchr(pmp->pm_w2u, (const char **)&inp, &ilen,
+		if (pmp->pm_w2u != NULL)
+			msdosfs_iconv->convchr(pmp->pm_w2u, (const char **)&inp, &ilen,
 				     (char **)&outp, &olen);
+		else
+			iconv_w2u((const char **)&inp, &ilen, (char **)&outp, &olen);
+
 		len -= olen;
 
 		/*
@@ -981,7 +1099,9 @@ unix2winchr(const u_char **instr, size_t *ilen, int lower, struct msdosfsmount *
 	if (pmp->pm_flags & MSDOSFSMNT_KICONV && msdosfs_iconv) {
 		outp = outbuf;
 		olen = 2;
-		if (lower & (LCASE_BASE | LCASE_EXT))
+		if (pmp->pm_u2w == NULL)
+			iconv_u2w((const char**)instr, ilen, (char **)&outp, &olen);
+		else if (lower & (LCASE_BASE | LCASE_EXT))
 			msdosfs_iconv->convchr_case(pmp->pm_u2w, (const char **)instr,
 						  ilen, (char **)&outp, &olen,
 						  KICONV_FROM_LOWER);
diff --git a/msdosfs_vfsops.c b/msdosfs_vfsops.c
index bde7cd2..d83e98f 100644
--- a/msdosfs_vfsops.c
+++ b/msdosfs_vfsops.c
@@ -134,8 +134,16 @@ update_mp(struct mount *mp, struct thread *td)
 				error = vfs_getopt(mp->mnt_optnew,
 				    "cs_dos", &dos, NULL);
 			if (!error) {
-				msdosfs_iconv->open(win, local, &pmp->pm_u2w);
-				msdosfs_iconv->open(local, win, &pmp->pm_w2u);
+				char *p = (char*)local;
+				if (p!=NULL && p[0]=='U' &&
+						p[1]=='T' && p[2]=='F' &&
+						p[3]=='-' && p[4]=='8' && p[5]=='\0') {
+					pmp->pm_w2u = NULL;
+					pmp->pm_u2w = NULL;
+				} else {
+					msdosfs_iconv->open(win, local, &pmp->pm_u2w);
+					msdosfs_iconv->open(local, win, &pmp->pm_w2u);
+				}
 				msdosfs_iconv->open(dos, local, &pmp->pm_u2d);
 				msdosfs_iconv->open(local, dos, &pmp->pm_d2u);
 			}
-- 
1.7.8

